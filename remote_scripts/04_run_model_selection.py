#!/usr/bin/env python3
"""
Script para executar a sele√ß√£o de modelos HAR
Configurado para:
- Balanceamento: main_classes
- Window size: 5000 samples (5 segundos)
"""

import os
import sys
import time
from datetime import datetime

# Adicionar o diret√≥rio do projeto ao Python path
project_root = os.path.expanduser("~/projects/PrevOccupAI_Dataset")
sys.path.insert(0, project_root)

def main():
    print("=" * 60)
    print("SELE√á√ÉO DE MODELOS HAR - PrevOccupAI")
    print("=" * 60)
    print(f"Data/Hora de in√≠cio: {datetime.now()}")
    print(f"Diret√≥rio do projeto: {project_root}")
    
    try:
        # Importar as fun√ß√µes necess√°rias
        from HAR.model_selection import perform_model_selection
        print("‚úì M√≥dulos HAR importados com sucesso")
        
        # Configurar par√¢metros
        # AJUSTAR ESTE CAMINHO PARA OS TEUS DADOS EXTRA√çDOS
        data_path = os.path.join(project_root, "extracted_features")  # AJUSTAR!
        balancing_type = "main_classes"
        window_size_samples = 5000  # 5 segundos a 1000Hz
        
        print(f"\nPar√¢metros configurados:")
        print(f"  - Data path: {data_path}")
        print(f"  - Balancing type: {balancing_type}")
        print(f"  - Window size: {window_size_samples} samples")
        
        # Verificar se o caminho dos dados existe
        if not os.path.exists(data_path):
            print(f"\n‚ùå ERRO: Caminho dos dados n√£o encontrado: {data_path}")
            print("\nPor favor, ajusta a vari√°vel 'data_path' no script para o caminho correto dos teus dados extra√≠dos.")
            print("Exemplo: data_path = '/path/to/your/extracted/features'")
            return 1
        
        print(f"\n‚úì Caminho dos dados encontrado: {data_path}")
        
        # Verificar subpastas esperadas
        expected_folders = [
            f"w_{window_size_samples}_sc_none",
            f"w_{window_size_samples}_sc_minmax", 
            f"w_{window_size_samples}_sc_standard"
        ]
        
        print(f"\nVerificando subpastas esperadas:")
        for folder in expected_folders:
            folder_path = os.path.join(data_path, folder)
            if os.path.exists(folder_path):
                print(f"  ‚úì {folder}")
            else:
                print(f"  ‚ùå {folder} - N√ÉO ENCONTRADA")
        
        # Confirmar antes de prosseguir
        print(f"\n" + "="*60)
        print("PRONTO PARA INICIAR A SELE√á√ÉO DE MODELOS")
        print("Este processo pode demorar v√°rias horas...")
        print("="*60)
        
        # Executar sele√ß√£o de modelos
        start_time = time.time()
        print(f"\nüöÄ Iniciando sele√ß√£o de modelos... {datetime.now()}")
        
        perform_model_selection(data_path, balancing_type, window_size_samples)
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"\n‚úÖ SELE√á√ÉO DE MODELOS CONCLU√çDA!")
        print(f"Tempo total: {duration/3600:.2f} horas ({duration/60:.1f} minutos)")
        print(f"Data/Hora de conclus√£o: {datetime.now()}")
        
        # Verificar resultados
        results_path = os.path.join(project_root, "Results")
        if os.path.exists(results_path):
            print(f"\nüìä Resultados salvos em: {results_path}")
            
            # Listar ficheiros de resultados
            for root, dirs, files in os.walk(results_path):
                for file in files:
                    if file.endswith('.csv'):
                        print(f"  - {os.path.join(root, file)}")
        
        print(f"\n‚ú® Pr√≥ximo passo: Executar 05_run_production_training.py")
        return 0
        
    except ImportError as e:
        print(f"\n‚ùå ERRO: Problema ao importar m√≥dulos: {e}")
        print("Verifica se o ambiente virtual est√° ativo e as depend√™ncias instaladas.")
        return 1
    except Exception as e:
        print(f"\n‚ùå ERRO durante a execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
